var abc
#  test
abc = 1
#yield count => abc + 1, sum => 10
out = each x in ttt2 where x.np > 15
 var delta
 delta = x.end - x.start * 1 + 0
 var i
 i = 0
 while i < 2
  if i == 0
    yield d => delta, u => x.user, i => i
  else
    yield d => delta, u => x.user, i => i + 1
  end
  i = i + 1
 end
end

out2 = seq y in out
 var s, n
 s = s + y.d
 n = n + 1
# debug y
 yield sum2 => s, avg2 => s / n, u => y.u
final
 yield sum2 => s + 1024, avg2 => s + 1024 / ( n + 1 ), u => 'final_user'
end

out3 = seq z in out2
  if z.sum2 >-10000000 
    yield sum3 => z.sum2, avg3 => z.avg2, u => z.u
  end
#  var x
#  x = x + z.sum2
#  yield sum3 => x, avg3 => z.avg2, u => z.u
end

out4 = seq z in out3
  var y
  y = y + z.sum3
  yield u => z.u, sum4 => y, avg4 => z.avg3
#  debug z
end

out5 = group z by z.u in out4
  var sum
  var count
  var avg5
  var u
  sum = sum + z.sum4
  count = count + 1
  avg5 = sum / count
  u = z.u
final
  yield count => count, sum => sum, my_avg => avg5, user => u
end

print out5

#include test_include.hpl

# compute total and average number of serdyuk's CPUs
#out3 = each t in tasks where t.user == 'serdyuk'
# yield key => t.key, ncpus => t.ncpus
#end

#out4 = seq t in out3
# var ncpus, n
# ncpus = ncpus + t.ncpus
# n = n + 1
#final
# yield ncpus, n, ncpus / n
#end

